/*
    마주치는 것이 불가능 -> 이전 친구가 있는 위치는 가지 않기
    한 구역 당 한번만 수확 가능  -> 방문한 구역은 0으로 초기화

    1. 모든 조합을 친구들이 번갈아가며 최적의 점수를 얻는다 (dfs)
        1번 친구 -> 2번친구 ->3번친구->1번친구 ... 이렇게 각 3초씩 번갈아 가면 dfs를 실행하려면 (본인+1)%m을 매개변수로 넘긴다
    2. 마주치는 것이 불가능 -> 각 친구마다 현재위치를 찍어 해당 depth에 해당 위치로는 가지 않기기 (3차원 방문배열로 서로 다른 차원에서 겹치는지 확인)
*/

import java.io.*;
import java.util.*;

public class Main {

    static int[][] map;
    static int[][] pos;
    static int[][][] visited;
    static int n,m;
    static int[] dx = new int[]{0,0,1,-1};
    static int[] dy = new int[]{1,-1,0,0};
    static int maxValue;
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        int sum = 0;
        map = new int[n][n];
        visited = new int[m][n][n];

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                Arrays.fill(visited[i][j],-1);
            }
        }
        for(int i=0;i<n;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<n;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        pos = new int[m][2];
        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            int x = pos[i][0] = Integer.parseInt(st.nextToken())-1;
            int y = pos[i][1] = Integer.parseInt(st.nextToken())-1;
            
            maxValue += map[x][y];
            visited[i][x][y] = 0; 
            map[x][y] = 0;
        }
        dfs(1, 0,maxValue);
        System.out.println(maxValue);

    }
    public static void dfs(int depth, int friendIdx, int sum){
        int nextDepth = depth;
        if(friendIdx == m-1){
            nextDepth++;
        }
        if(depth == 4){
            maxValue = Math.max(sum, maxValue);
            return;
        }
        int x = pos[friendIdx][0];
        int y = pos[friendIdx][1];
        for(int d=0;d<4;d++){
 
            int nx = x + dx[d];
            int ny = y + dy[d];
            if(nx<0||ny<0||nx>=n||ny>=n||visited[friendIdx][nx][ny] !=-1) continue;
            boolean dontGo = false;
            for(int i=1;i<m;i++){
                int fi = (friendIdx + i) % m;
                if(visited[fi][nx][ny] % 4 == depth % 4){
                    dontGo = true;   // 내가 갈려는 곳에 현재 누가 존재한다면 못감  
                    break;
                } 
            }
            if(dontGo)continue;

            // 내가 가려는 곳에 갈 수 있음
            
            visited[friendIdx][nx][ny] = depth%4;
            pos[friendIdx][0] = nx;
            pos[friendIdx][1] = ny;
            int cost = map[nx][ny];
            map[nx][ny] = 0;
            
            dfs(nextDepth, (friendIdx+1)%m, sum + cost);
            map[nx][ny] = cost;
            visited[friendIdx][nx][ny] = -1;
            pos[friendIdx][0] = x;
            pos[friendIdx][1] = y;
        }
    
    }
}
